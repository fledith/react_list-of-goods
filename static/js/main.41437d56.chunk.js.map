{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","minLengths","Array","fill","map","_","i","console","log","App","state","isStarted","isReversed","sortType","NONE","selected","getReorderedGoods","goods","visibleGoods","filter","good","length","sort","f","s","ALPHABET","localeCompare","LENGTH","reverse","startedSort","setState","sortByLength","sortAlphabetically","revers","handleChangeSelect","event","target","value","reset","this","className","type","onClick","name","onChange","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAoBKA,E,kEAjBCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAa,IAAIC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAE3DC,QAAQC,IAAIP,G,SAEPF,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAaE,IAAMU,EAAb,4MACEC,MAAQ,CACNC,WAAW,EACXC,YAAY,EACZC,SAAUd,EAASe,KACnBC,SAAU,GALd,EAQEC,kBAAoB,SAClBC,EACAJ,EACAD,EACAG,GAEA,IAAMG,EAAeD,EAAME,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUN,KAczD,OAXAG,EAAaI,MAAK,SAACC,EAAGC,GACpB,OAAQX,GACN,KAAKd,EAAS0B,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKzB,EAAS4B,OACZ,OAAOJ,EAAEF,OAASG,EAAEH,OACtB,QACE,OAAO,MAINT,EACHM,EAAaU,UACbV,GA9BR,EAiCEW,YAAc,kBACZ,EAAKC,SAAS,CAAEnB,WAAW,KAlC/B,EAqCEoB,aAAe,kBACb,EAAKD,SAAS,CAAEjB,SAAUd,EAAS4B,UAtCvC,EAyCEK,mBAAqB,kBACnB,EAAKF,SAAS,CAAEjB,SAAUd,EAAS0B,YA1CvC,EA6CEQ,OAAS,kBACP,EAAKH,UAAS,SAAApB,GAAK,MAAK,CAAEE,YAAaF,EAAME,gBA9CjD,EAiDEsB,mBAAqB,SAACC,GAAD,OACnB,EAAKL,SAAS,CAAEf,UAAWoB,EAAMC,OAAOC,SAlD5C,EAqDEC,MAAQ,kBACN,EAAKR,SACH,CAAEjB,SAAUd,EAASe,KAAMF,YAAY,EAAOG,SAAU,KAvD9D,4CA2DE,WACE,MAEIwB,KAAK7B,MADPC,EADF,EACEA,UAAWC,EADb,EACaA,WAAYC,EADzB,EACyBA,SAAUE,EADnC,EACmCA,SAE7BE,EAAQsB,KAAKvB,kBACjBhB,EAAiBa,EAAUD,EAAYG,GAGzC,OACE,sBAAKyB,UAAU,eAAf,WACI7B,GACA,wBACE8B,KAAK,SACLD,UAAU,iCACVE,QAASH,KAAKV,YAHhB,mBASDlB,GACC,qCACE,sBAAK6B,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,iBACVE,QAASH,KAAKP,mBAHhB,iCAQA,wBACES,KAAK,SACLD,UAAU,iBACVE,QAASH,KAAKR,aAHhB,4BAQA,wBACEU,KAAK,SACLD,UAAU,iBACVE,QAASH,KAAKN,OAHhB,qBAQA,wBACEQ,KAAK,SACLD,UAAU,gCACVE,QAASH,KAAKD,MAHhB,mBAQA,wBACEK,KAAK,YACLH,UAAU,oBACVH,MAAOtB,EACP6B,SAAUL,KAAKL,mBAJjB,SAMGjC,EAAWG,KAAI,SAAAiB,GAAM,OACpB,wBAAQgB,MAAOhB,EAAf,SACGA,GADyBA,WAOlC,oBAAImB,UAAU,QAAd,SACGvB,EAAMb,KAAI,SAAAgB,GAAI,OACb,oBAAIoB,UAAU,cAAd,SACGpB,GAD8BA,kBAlIjD,GAAyByB,aC9BzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.41437d56.chunk.js","sourcesContent":["import { ChangeEvent, Component } from 'react';\nimport './App.css';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst minLengths = new Array(10).fill(0).map((_, i) => i + 1);\n\nconsole.log(minLengths) // eslint-disable-line\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype State = {\n  isStarted: boolean,\n  isReversed: boolean,\n  sortType: SortType,\n  selected: number,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    isStarted: false,\n    isReversed: false,\n    sortType: SortType.NONE,\n    selected: 1,\n  };\n\n  getReorderedGoods = (\n    goods: string[],\n    sortType: SortType,\n    isReversed: boolean,\n    selected: number,\n  ) => {\n    const visibleGoods = goods.filter(good => good.length <= selected);\n\n    // f equal first word and s equal second word\n    visibleGoods.sort((f, s) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return f.localeCompare(s);\n        case SortType.LENGTH:\n          return f.length - s.length;\n        default:\n          return 0;\n      }\n    });\n\n    return isReversed\n      ? visibleGoods.reverse()\n      : visibleGoods;\n  };\n\n  startedSort = () => (\n    this.setState({ isStarted: true })\n  );\n\n  sortByLength = () => (\n    this.setState({ sortType: SortType.LENGTH })\n  );\n\n  sortAlphabetically = () => (\n    this.setState({ sortType: SortType.ALPHABET })\n  );\n\n  revers = () => (\n    this.setState(state => ({ isReversed: !state.isReversed }))\n  );\n\n  handleChangeSelect = (event: ChangeEvent<HTMLSelectElement>) => (\n    this.setState({ selected: +event.target.value })\n  );\n\n  reset = () => (\n    this.setState(\n      { sortType: SortType.NONE, isReversed: false, selected: 1 },\n    )\n  );\n\n  render() {\n    const {\n      isStarted, isReversed, sortType, selected,\n    } = this.state;\n    const goods = this.getReorderedGoods(\n      goodsFromServer, sortType, isReversed, selected,\n    );\n\n    return (\n      <div className=\"App is-light\">\n        {!isStarted && (\n          <button\n            type=\"button\"\n            className=\"button is-success button-start\"\n            onClick={this.startedSort}\n          >\n            Start\n          </button>\n        )}\n\n        {isStarted && (\n          <>\n            <div className=\"buttons\">\n              <button\n                type=\"button\"\n                className=\"button is-dark\"\n                onClick={this.sortAlphabetically}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-dark\"\n                onClick={this.sortByLength}\n              >\n                Sort by length\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-dark\"\n                onClick={this.revers}\n              >\n                Reverse\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-danger button-reset\"\n                onClick={this.reset}\n              >\n                Reset\n              </button>\n\n              <select\n                name=\"minLength\"\n                className=\"select is-primary\"\n                value={selected}\n                onChange={this.handleChangeSelect}\n              >\n                {minLengths.map(length => (\n                  <option value={length} key={length}>\n                    {length}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <ul className=\"Goods\">\n              {goods.map(good => (\n                <li className=\"Goods__item\" key={good}>\n                  {good}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}